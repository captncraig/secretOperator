/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/captncraig/secretOperator/pkg/apis/secrets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RandomSecretLister helps list RandomSecrets.
type RandomSecretLister interface {
	// List lists all RandomSecrets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RandomSecret, err error)
	// RandomSecrets returns an object that can list and get RandomSecrets.
	RandomSecrets(namespace string) RandomSecretNamespaceLister
	RandomSecretListerExpansion
}

// randomSecretLister implements the RandomSecretLister interface.
type randomSecretLister struct {
	indexer cache.Indexer
}

// NewRandomSecretLister returns a new RandomSecretLister.
func NewRandomSecretLister(indexer cache.Indexer) RandomSecretLister {
	return &randomSecretLister{indexer: indexer}
}

// List lists all RandomSecrets in the indexer.
func (s *randomSecretLister) List(selector labels.Selector) (ret []*v1alpha1.RandomSecret, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RandomSecret))
	})
	return ret, err
}

// RandomSecrets returns an object that can list and get RandomSecrets.
func (s *randomSecretLister) RandomSecrets(namespace string) RandomSecretNamespaceLister {
	return randomSecretNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RandomSecretNamespaceLister helps list and get RandomSecrets.
type RandomSecretNamespaceLister interface {
	// List lists all RandomSecrets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RandomSecret, err error)
	// Get retrieves the RandomSecret from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RandomSecret, error)
	RandomSecretNamespaceListerExpansion
}

// randomSecretNamespaceLister implements the RandomSecretNamespaceLister
// interface.
type randomSecretNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RandomSecrets in the indexer for a given namespace.
func (s randomSecretNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RandomSecret, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RandomSecret))
	})
	return ret, err
}

// Get retrieves the RandomSecret from the indexer for a given namespace and name.
func (s randomSecretNamespaceLister) Get(name string) (*v1alpha1.RandomSecret, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("randomsecret"), name)
	}
	return obj.(*v1alpha1.RandomSecret), nil
}
